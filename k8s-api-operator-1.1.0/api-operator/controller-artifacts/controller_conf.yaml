#Copyright (c)  WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: controller-config
  namespace: wso2-system
data:
  #mgw toolkit image to initialize/setup the micro gw project
  mgwToolkitImg: wso2am/wso2micro-gw-toolkit:3.1.0
  #mgw runtime image to use in the mgw executable
  mgwRuntimeImg: wso2/wso2micro-gw:3.1.0
  #kaniko image for the kaniko pod which builds the mgw api runtime and pushes to the registry
  kanikoImg: gcr.io/kaniko-project/executor:v0.18.0
  #Maximum number of replicas for the Horizontal Pod Auto-scale. Default->  hpaMaxReplicas: "5"
  hpaMaxReplicas: "5"
  #Avg CPU utilization(%) to spin up the next pod.  Default->  hpaTargetAverageUtilizationCPU: "50"
  hpaTargetAverageUtilizationCPU: "15"
  #Required CPU usage for pods.   Default-> resourceRequestCPU: "1000m"
  resourceRequestCPU: "750m"
  #Required Memory usage pods can use.   Default->  resourceRequestMemory: "512Mi"
  resourceRequestMemory: "512Mi"
  #Max CPU usage limit a pod can use.   Default->  resourceLimitCPU: "2000m"
  resourceLimitCPU: "1000m"
  #Max Memory usage limit a pod can use.   Default->  resourceLimitMemory: "512Mi"
  resourceLimitMemory: "512Mi"

  resourceRequestCPUTarget: "500m"
  #Required Memory usage pods can use for TargetEndPoint.   Default->  resourceRequestMemory: "512Mi"
  resourceRequestMemoryTarget: "512Mi"
  #Max CPU usage limit a pod can use for TargetEndPoint.   Default->  resourceLimitCPU: "2000m"
  resourceLimitCPUTarget: "500m"
  #Max Memory usage limit a pod can use for TargetEndPoint.   Default->  resourceLimitMemory: "512Mi"
  resourceLimitMemoryTarget: "512Mi"
  #Configure readiness probe initial delay for API pod
  readinessProbeInitialDelaySeconds: "8"
  #Configure readiness prob interval for API pod
  readinessProbePeriodSeconds: "5"
  #Configure liveness probe initial delay for API pod
  livenessProbeInitialDelaySeconds: "10"
  #Configure liveness probe interval for API pod
  livenessProbePeriodSeconds: "30"
  #Stop at docker image creation or continue to deploy kubernetes artifact.
  #Default->  generatekubernbetesartifactsformgw: "true"
  generatekubernbetesartifactsformgw: "true"
  #Available modes - ingress, default , route and clusterIP
  operatorMode: "ingress"


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: apim-config
  namespace: wso2-system
data:
  #By default hostname verification is disabled. In a production scenario, this has to be enabled.
  verifyHostname: "false"
  #Log level of the managed API (microgateway). Available levels: INFO, DEBUG, TRACE
  logLevel: "INFO"
  #Ports from which the managed API service is getting exposed
  httpPort: "9090"
  httpsPort: "9095"
  #Enable distributed ratelimiting. Default value:false. If enabled please deploy API Portal
  enabledGlobalTMEventPublishing: "false"
  #The central traffic management solution URL (related to distributed ratelimiting)
  #Format: hostname_of_API_Portal:Default_port
  throttleEndpoint: "wso2apim.wso2:9443"
  #Message broker connection URL (related to distributed ratelimiting and token revocation)
  #Format: hostname_of_API_Portal:JMS_port
  jmsConnectionProvider: "wso2apim.wso2:5672"
  #Token revocation
  #Enable real time notifier for token revocation
  enableRealtimeMessageRetrieval: "false"
  #Request and response validation
  enableRequestValidation: "false"
  enableResponseValidation: "false"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-configs
  namespace: wso2-system
data:
  ingress.properties: |
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: false
  ingressResourceName: "api-operator-ingress"
  #Define whether ingress to use http or https endpoint of operator deployment
  ingressTransportMode: "https"
  #Define the hostname of the ingress
  ingressHostName : "mgw.ingress.wso2.com"
  #Define the secret name for TLS certificate
  #tlsSecretName: ""

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kaniko-arguments
  namespace: wso2-system
data:
  kanikoArguments: |
  #kaniko additional flags should go here: Please refer https://github.com/GoogleContainerTools/kaniko#additional-flags

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: route-configs
  namespace: wso2-system
data:
  route.properties: |
    openshift.io/host.generated: false
  routeName: "api-operator-route"
  #Define whether Route to use http or https endpoint of operator deployment
  routeTransportMode: "http"
  #Define the hostname of the Route
  routeHost : "mgw.route.wso2.com"
  # TLS termination - passthrough, edge, reencrypt
  tlsTermination: ""
